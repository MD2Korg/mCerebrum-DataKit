version = '2.0.13'
apply from: 'versioning.gradle'
buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.24.2'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def store_file = "keystore_missing"
if (hasProperty('MD2K_RELEASE_STORE_FILE')) {
    store_file = MD2K_RELEASE_STORE_FILE
} else if (System.getenv('MD2K_RELEASE_STORE_FILE')) {
    store_file = System.getenv('MD2K_RELEASE_STORE_FILE')
} else {
    println "ERROR: " + store_file
}

def store_password = "keystore_password_missing"
if (hasProperty('MD2K_RELEASE_STORE_PASSWORD')) {
    store_password = MD2K_RELEASE_STORE_PASSWORD
} else if (System.getenv('MD2K_RELEASE_STORE_PASSWORD')) {
    store_password = System.getenv('MD2K_RELEASE_STORE_PASSWORD')
} else {
    println "ERROR: " + store_password
}


def key_alias = "release_key_alias_missing"
if (hasProperty('MD2K_RELEASE_KEY_ALIAS')) {
    key_alias = MD2K_RELEASE_KEY_ALIAS
} else if (System.getenv('MD2K_RELEASE_KEY_ALIAS')) {
    key_alias = System.getenv('MD2K_RELEASE_KEY_ALIAS')
} else {
    println "ERROR: " + key_alias
}

def key_password = "release_key_password_missing"
if (hasProperty('MD2K_RELEASE_KEY_PASSWORD')) {
    key_password = MD2K_RELEASE_KEY_PASSWORD
} else if (System.getenv('MD2K_RELEASE_KEY_PASSWORD')) {
    key_password = System.getenv('MD2K_RELEASE_KEY_PASSWORD')
} else {
    println "ERROR: " + key_password
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'
    useLibrary 'org.apache.http.legacy' //For httpclient
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 21
        versionCode buildVersionCode()
        versionName version
        multiDexEnabled true //important
    }


    signingConfigs {
        release {

            storeFile file(store_file)
            storePassword store_password
            keyAlias key_alias
            keyPassword key_password
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig getSigningConfig()
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    output.outputFile = new File(output.outputFile.parent, output.outputFile.name.replace("-release", "${variant.versionName}"))
                }
            }
        }
    }
    productFlavors {
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':datakitapi')
    compile project(':core')
    compile project(':commons')
    compile project(':utilities')
    compile('com.crashlytics.sdk.android:crashlytics:2.6.1@aar') {
        transitive = true;
    }
    compile('org.apache.httpcomponents:httpmime:4.3.6') {
        exclude module: "httpclient-android"
    }
    compile project(path: ':system')
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.esotericsoftware:kryo:3.0.3'
    compile 'org.apache.httpcomponents:httpclient-android:4.3.5'
    compile 'com.bluelinelabs:logansquare:1.3.7'
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    apt 'com.bluelinelabs:logansquare-compiler:1.3.7'
}
